CREATE OR REPLACE PROCEDURE SP_LOAD_GOLD_FACTS()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
    -- Load Gold Daily Sales and Inventory Fact
    INSERT INTO GOLD.DAILY_SALES_INVENTORY_FACT
    SELECT 
        COALESCE(s.CAL_DT, i.CAL_DT) AS CAL_DT, 
        COALESCE(s.STORE_KEY, i.STORE_KEY) AS STORE_KEY, 
        COALESCE(s.PROD_KEY, i.PROD_KEY) AS PROD_KEY, 
        NVL(s.SALES_QTY, 0) AS SALES_QTY, 
        NVL(s.SALES_PRICE, 0) AS SALES_PRICE, 
        NVL(s.SALES_AMT, 0) AS SALES_AMT, 
        NVL(s.DISCOUNT, 0) AS DISCOUNT, 
        NVL(s.SALES_COST, 0) AS SALES_COST, 
        NVL(s.SALES_MGRN, 0) AS SALES_MGRN, 
        NVL(i.STOCK_ON_HAND_QTY, 0) AS STOCK_ON_HAND_QTY, 
        NVL(i.ORDERED_STOCK, 0) AS ORDERED_STOCK_QTY, 
        NVL(i.OUT_OF_STOCK_FLG, 0) AS OUT_OF_STOCK_FLG, 
        CASE WHEN i.OUT_OF_STOCK_FLG = 1 THEN 0 ELSE 1 END AS IN_STOCK_FLG, 
        CASE WHEN i.STOCK_ON_HAND_QTY < s.SALES_QTY THEN 1 ELSE 0 END AS LOW_STOCK_FLG, 
        CURRENT_TIMESTAMP() AS DW_CREATED_AT 
    FROM GOLD.DAILY_SALES_STG s 
    FULL OUTER JOIN GOLD.DAILY_INVENTORY_STG i  
        ON s.CAL_DT = i.CAL_DT  
        AND s.STORE_KEY = i.STORE_KEY  
        AND s.PROD_KEY = i.PROD_KEY;
    -- Load Gold Weekly Sales and Inventory Fact
    INSERT INTO GOLD.WEEKLY_SALES_INVENTORY_FACT
    SELECT 
        s.CAL_DT, 
        c.YEAR_NUM AS YR_NUM, 
        c.WEEK_NUM AS WK_NUM, 
        s.STORE_KEY, 
        s.PROD_KEY, 
        SUM(SALES_QTY) AS WK_SALES_QTY, 
        SUM(SALES_AMT) AS WK_SALES_AMT, 
        AVG(SALES_PRICE) AS AVG_SALES_PRICE, 
        SUM(CASE WHEN c.DAY_OF_WK_NUM = 6 THEN s.STOCK_ON_HAND_QTY ELSE 0 END) AS EOP_STOCK_ON_HAND_QTY, 
        SUM(CASE WHEN c.DAY_OF_WK_NUM = 6 THEN s.ORDERED_STOCK_QTY ELSE 0 END) AS EOP_ORDERED_STOCK_QTY, 
        SUM(SALES_COST) AS WK_SALES_COST, 
        ROUND(COUNT(CASE WHEN c.DAY_OF_WK_NUM BETWEEN 0 AND 6 AND s.OUT_OF_STOCK_FLG = 1 THEN 1 END)/7 * 100, 2) AS OUT_OF_STOCK_PERCENTAGE, 
        SUM(s.OUT_OF_STOCK_FLG + s.LOW_STOCK_FLG) AS TOTAL_LOW_STOCK_IMPACT, 
        ROUND(SUM(CASE WHEN s.LOW_STOCK_FLG = 1 THEN s.SALES_AMT - s.STOCK_ON_HAND_QTY ELSE 0 END), 2) AS POTENTIAL_LOW_STOCK_IMPACT, 
        ROUND(SUM(CASE WHEN s.OUT_OF_STOCK_FLG = 1 THEN s.SALES_AMT ELSE 0 END), 2) AS NO_STOCK_IMPACT, 
        COUNT(CASE WHEN s.LOW_STOCK_FLG = 1 THEN 1 END) AS LOW_STOCK_INSTANCE, 
        COUNT(CASE WHEN s.OUT_OF_STOCK_FLG = 1 THEN 1 END) AS NO_STOCK_INSTANCES, 
        ROUND(SUM(CASE WHEN c.DAY_OF_WK_NUM = 6 THEN s.STOCK_ON_HAND_QTY ELSE 0 END)/NULLIF(SUM(s.SALES_QTY), 0), 2) AS WEEKS_OF_SUPPLY, 
        CURRENT_TIMESTAMP() AS DW_CREATED_AT 
    FROM GOLD.DAILY_SALES_INVENTORY_FACT s 
    JOIN GOLD.CALENDAR_DIM c ON s.CAL_DT = c.CAL_DT 
    GROUP BY 1, 2, 3, 4, 5;
    RETURN 'Gold Facts Loaded Successfully';
END;
$$;